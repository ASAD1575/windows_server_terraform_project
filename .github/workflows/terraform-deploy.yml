name: 'Terraform Deploy'

on:
  push:
    branches:
      - main   # Change if your default branch is different
  pull_request:   # Run on PRs for plan + validation
  workflow_dispatch:  # Allows manual triggering

env:
  TF_VERSION: '1.6.0'  # Terraform version
  AWS_REGION: ${{ secrets.AWS_REGION != '' && secrets.AWS_REGION || 'us-east-1' }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Init
      id: init
      run: terraform init -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=tfplan | tee plan.txt

    - name: Save plan output
      id: plan-output
      if: always()
      run: |
        echo "plan<<EOF" >> $GITHUB_OUTPUT
        cat plan.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update Pull Request with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Validate ðŸ–Œ \`${{ steps.fmt.outcome }}\`
          #### Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${{ steps.plan-output.outputs.plan }}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      # For extra safety: require approval via "environments" in GitHub
      environment: production
      run: terraform apply -auto-approve -no-color tfplan

    - name: Wait for Instance Readiness (Optional)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        INSTANCE_ID=$(terraform output -raw base_instance_id || echo "")
        if [ -n "$INSTANCE_ID" ]; then
          echo "Waiting for instance $INSTANCE_ID to be ready..."
          chmod +x wait_for_flag.sh
          ./wait_for_flag.sh "$INSTANCE_ID" "$AWS_REGION"
        else
          echo "No base_instance_id output found, skipping wait script."
        fi
